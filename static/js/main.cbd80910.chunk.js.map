{"version":3,"sources":["categoryForm.js","store.js","taskForm.js","tasks.js","App.js","reportWebVitals.js","index.js"],"names":["CategoryForm","onFormSubmit","useState","errors","setErrors","color","setColor","name","setName","classes","makeStyles","theme","root","width","backgroundColor","palette","background","paper","submitButton","marginTop","backgroundImage","boxShadow","className","TextField","fullWidth","autoFocus","error","includes","value","onChange","e","target","margin","label","type","height","onChangeComplete","hex","Button","size","onClick","formErrors","length","push","formSubmit","sortedTasks","sort","a","b","moment","dueDate","isBefore","isAfter","getFilteredTasks","tasks","filters","filter","task","status","get","category","searchQuery","toLowerCase","search","React","createContext","Provider","Consumer","StoreProvider","props","fromJS","categoriesJson","categories","setCategories","setTasks","Map","query","setFilters","filteredTasks","setFilteredTasks","addTask","index","i","getIn","insert","id","uuidv4","addCategory","editTask","findIndex","t","delete","toggleStatus","setIn","removeTask","getCategoryById","find","c","updateFilters","f","children","TaskForm","initialValues","title","setTitle","description","setDescription","categoryId","setCategoryId","setStatus","toDate","Date","setDueDate","noValidate","autoComplete","Grid","container","spacing","item","xs","select","MenuItem","map","utils","DateFnsUtils","format","date","trim","Tasks","confirmVisible","setConfirmVisible","editTaskVisible","setEditTaskVisible","selectedTask","setSelectedTask","position","overflow","metaData","display","alignItems","context","SearchForm","Alert","severity","List","ListItem","style","borderLeft","ListItemText","primary","FormControlLabel","control","Checkbox","checked","secondary","ListItemSecondaryAction","IconButton","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","formData","marginBottom","toJS","App","categoriesVisible","setCategoriesVisible","newTaskVisible","setNewTaskVisible","ButtonGroup","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbd80910.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  TextField,\n  Button\n} from '@material-ui/core';\nimport { CirclePicker as ColorOptions } from 'react-color';\n\nexport default function CategoryForm({onFormSubmit}) {\n  const [errors, setErrors] = useState([]);\n  const [color, setColor] = useState('#ffffff');\n  const [name, setName] = useState('');\n  const classes = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n    },\n    submitButton: {\n      color: '#fff',\n      marginTop: 30,\n      backgroundImage: 'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n      boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\n    }\n  }))();\n  const formSubmit = () => {\n    const formErrors = [];\n    if(!name.length) {\n      formErrors.push('name');\n    }\n    if(!color.length) {\n      formErrors.push('color');\n    }\n    setErrors(formErrors);\n    if(!formErrors.length) {\n      onFormSubmit({name, color});\n      setColor('#ffffff');\n      setName('');\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        fullWidth\n        autoFocus\n        error={errors.includes('name')}\n        value={name}\n        onChange={(e) => {setName(e.target.value)}}\n        margin=\"dense\"\n        label=\"Category Name\"\n        type=\"text\"\n      />\n\n      <p>Color</p>\n      <ColorOptions width=\"100%\" height={100} onChangeComplete={ ({hex}) => {\n        setColor(hex);\n      }} />\n\n      <Button className={classes.submitButton} size=\"large\" color=\"primary\" onClick={() => formSubmit()}>Submit</Button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { fromJS, Map } from 'immutable';\nimport { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\nimport categoriesJson from \"./data/categories.json\";\nimport tasksJson from './data/tasks.json';\n\nconst sortedTasks = tasksJson.sort((a, b) => {\n  a = moment(a.dueDate);\n  b = moment(b.dueDate);\n  if(a.isBefore(b)) return -1;\n  if(a.isAfter(b)) return 1;\n  return 0;\n});\n\nconst getFilteredTasks = (tasks, filters) => {\n  return tasks.filter((task) => {\n    const status = filters.get('status');\n    const category = filters.get('category');\n    const searchQuery = filters.get('query').toLowerCase();\n    const dueDate = filters.get('dueDate');\n    if(status !== 'all' && status !== task.get('status')) {\n      return false;\n    }\n    if(category !== 'all' && category !== task.get('categoryId')) {\n      return false;\n    }\n    if(searchQuery !== '' &&\n      !(task.get('title').toLowerCase().search(searchQuery) > -1 || task.get('description').toLowerCase().search(searchQuery) > -1)) {\n      return false;\n    }\n    if(dueDate && moment(dueDate).isBefore(moment(task.get('dueDate')))) {\n      return false;\n    }\n    return true;\n  });\n};\n\nconst { Provider, Consumer } = React.createContext();\n\nfunction StoreProvider(props) {\n  let [categories, setCategories] = useState(fromJS(categoriesJson));\n  let [tasks, setTasks] = useState(fromJS(sortedTasks));\n  let [filters, setFilters] = useState(Map({status: 'pending', category: 'all', query: ''}));\n  let [filteredTasks, setFilteredTasks] = useState(getFilteredTasks(tasks, filters));\n\n  const addCategory = (category) => {\n    setCategories(categories.push(Map({id: uuidv4(), ...category})));\n  };\n  const addTask = (task) => {\n    let index = 0;\n    for(let i = 0; i < tasks.size; i += 1) {\n      if(moment(task.dueDate).isBefore(moment(tasks.getIn([i, 'dueDate'])))) {\n        break;\n      }\n      index = i + 1;\n    }\n    tasks = tasks.insert(index, Map({id: uuidv4(), ...task}));\n    setTasks(tasks);\n    setFilteredTasks(getFilteredTasks(tasks, filters));\n  };\n  const editTask = (id, task) => {\n    let index = tasks.findIndex(t => t.get('id') === id);\n    tasks = tasks.delete(index);\n    addTask(task);\n  };\n  const getCategoryById = (id) => {\n    return categories.find(c => c.get('id') === id);\n  };\n  const toggleStatus = (id, status) => {\n    const index = tasks.findIndex(t => t.get('id') === id);\n    tasks = tasks.setIn([index, 'status'], status);\n    setTasks(tasks);\n    setFilteredTasks(getFilteredTasks(tasks, filters));\n  };\n  const removeTask = (id) => {\n    const index = tasks.findIndex(t => t.get('id') === id);\n    tasks = tasks.delete(index);\n    setTasks(tasks);\n    setFilteredTasks(getFilteredTasks(tasks, filters));\n  };\n  const updateFilters = (f) => {\n    filters = fromJS(f);\n    setFilters(filters);\n    setFilteredTasks(getFilteredTasks(tasks, filters));\n  };\n\n  return (\n    <Provider value={{\n      categories,\n      filteredTasks,\n      filters,\n      addCategory,\n      addTask,\n      editTask,\n      toggleStatus,\n      removeTask,\n      getCategoryById,\n      updateFilters\n    }}>{props.children}</Provider>\n  );\n}\n\nexport {\n  StoreProvider,\n  Consumer as StoreConsumer\n};\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  TextField,\n  Button,\n  MenuItem,\n  Grid\n} from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Map } from 'immutable';\nimport moment from 'moment';\nexport default function TaskForm({initialValues = Map(), categories = [], onFormSubmit = () => {}}) {\n  const [errors, setErrors] = useState([]);\n  const [title, setTitle] = useState(initialValues.get('title') || '');\n  const [description, setDescription] = useState(initialValues.get('description') || '');\n  const [categoryId, setCategoryId] = useState(initialValues.get('categoryId') || '');\n  const [status, setStatus] = useState(initialValues.get('status') || 'pending');\n  const [dueDate, setDueDate] = useState(initialValues.get('dueDate') ? moment(initialValues.get('dueDate')).toDate() : new Date());\n  const classes = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n    },\n    submitButton: {\n      color: '#fff',\n      marginTop: 30,\n      backgroundImage: 'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n      boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\n    }\n  }))();\n  const formSubmit = () => {\n    const formErrors = [];\n    if(!title.trim().length) {\n      formErrors.push('title');\n    }\n    if(!description.trim().length) {\n      formErrors.push('description');\n    }\n    if(!categoryId) {\n      formErrors.push('categoryId');\n    }\n    if(!dueDate) {\n      formErrors.push('dueDate');\n    }\n    setErrors(formErrors);\n    if(!formErrors.length) {\n      onFormSubmit({title: title.trim(), description: description.trim(), status, categoryId, dueDate});\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <TextField\n              fullWidth\n              label=\"Title\"\n              value={title}\n              error={errors.includes('title')}\n              onChange={e => setTitle(e.target.value)} />\n          </Grid>\n          <Grid item xs>\n            <TextField\n              fullWidth\n              label=\"Description\"\n              value={description}\n              error={errors.includes('description')}\n              onChange={e => setDescription(e.target.value)} />\n          </Grid>\n        </Grid>\n\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <TextField\n              select\n              fullWidth\n              label=\"Status\"\n              value={status}\n              error={errors.includes('status')}\n              onChange={e => setStatus(e.target.value)}>\n              <MenuItem value=\"done\">Done</MenuItem>\n              <MenuItem value=\"pending\">Pending</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item xs>\n            <TextField\n              fullWidth\n              select\n              label=\"Category\"\n              value={categoryId}\n              error={errors.includes('categoryId')}\n              onChange={e => setCategoryId(e.target.value)}>\n              {categories.map((item) => {\n                return(\n                  <MenuItem value={item.get('id')} key={item.get('id')}>{item.get('name')}</MenuItem>\n                );\n              })}\n            </TextField>\n          </Grid>\n          <Grid item xs>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                margin=\"normal\"\n                id=\"time-picker\"\n                format=\"MM/dd/yyyy\"\n                value={dueDate}\n                error={errors.includes('dueDate')}\n                onChange={date => {\n                  setDueDate(date);\n                }}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n        <Button className={classes.submitButton} size=\"large\" color=\"primary\" onClick={() => formSubmit()}>Submit</Button>\n      </form>\n    </div>\n  );\n}\n","import React, { Fragment, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  FormControlLabel,\n  Checkbox,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  ListItemSecondaryAction,\n  IconButton,\n  MenuItem,\n  TextField\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport {\n  DeleteOutlined as DeleteIcon,\n  EditOutlined as EditIcon,\n  AvTimerOutlined as ClockIcon\n} from '@material-ui/icons';\nimport moment from 'moment';\nimport { Map } from 'immutable';\nimport { StoreConsumer } from \"./store\";\nimport TaskForm from \"./taskForm\";\n\nexport default function Tasks() {\n  const [confirmVisible, setConfirmVisible] = useState(false);\n  const [editTaskVisible, setEditTaskVisible] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(Map());\n  const classes = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      position: 'relative',\n      overflow: 'auto',\n    },\n    metaData: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: 3\n    }\n  }))();\n\n  return (\n    <div className={classes.root}>\n      <StoreConsumer>\n        {context => {\n          return (\n            <Fragment>\n              <SearchForm />\n              {!context.filteredTasks.size ? <Alert severity=\"info\">No items found</Alert>: ''}\n              <List>\n                {context.filteredTasks.map((item) => {\n                  const category = context.getCategoryById(item.get('categoryId'));\n                  return(\n                    <div key={item.get('id')}>\n                      <ListItem style={{marginTop: 1, borderLeft: `3px solid ${category ? category.get('color') : '#fff'}`}}>\n                        <ListItemText\n                          primary={\n                            <FormControlLabel\n                              control={<Checkbox color=\"primary\" checked={item.get('status') === 'done'} onChange={() => {\n                                let status = item.get('status');\n                                context.toggleStatus(item.get('id'), status === 'done' ? 'pending' : 'done');\n                              }} />}\n                              label={item.get('title')}\n                            />\n                          }\n                          secondary={\n                            <Fragment>\n                              <span>\n                                {item.get('description')}\n                              </span>\n                              <br />\n                              <span className={classes.metaData}><ClockIcon />{moment(item.get('dueDate')).format('DD/MM/YYYY')}</span>\n                            </Fragment>\n                          }\n                        />\n                        <div>\n                          <ListItemSecondaryAction>\n                            <IconButton onClick={() => {\n                              setSelectedTask(item);\n                              setEditTaskVisible(true);\n                            }}><EditIcon /></IconButton>\n                            <IconButton onClick={() => {\n                              setSelectedTask(item);\n                              setConfirmVisible(true);\n                            }}><DeleteIcon /></IconButton>\n                          </ListItemSecondaryAction>\n                        </div>\n                      </ListItem>\n                    </div>\n                  );\n                })}\n              </List>\n              <Dialog\n                open={confirmVisible}\n                onClose={() => setConfirmVisible(false)}>\n                <DialogTitle>Confirm</DialogTitle>\n                <DialogContent>\n                  <DialogContentText>\n                    Do you want to delete this task?\n                  </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                  <Button autoFocus onClick={() => setConfirmVisible(false)} color=\"primary\">\n                    No\n                  </Button>\n                  <Button onClick={() => {\n                    setConfirmVisible(false);\n                    context.removeTask(selectedTask.get('id'));\n                  }} color=\"primary\" autoFocus>\n                    Yes\n                  </Button>\n                </DialogActions>\n              </Dialog>\n              <Dialog fullWidth={true} open={editTaskVisible} onClose={() => setEditTaskVisible(false)}>\n                <DialogTitle>Edit Task</DialogTitle>\n                <DialogContent>\n                  <TaskForm categories={context.categories} initialValues={selectedTask} onFormSubmit={(formData) => {\n                    context.editTask(selectedTask.get('id'), formData);\n                    setEditTaskVisible(false);\n                  }} />\n                </DialogContent>\n              </Dialog>\n\n            </Fragment>\n          );\n        }}\n      </StoreConsumer>\n    </div>\n  );\n}\n\nfunction SearchForm() {\n  const classes = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '100%'\n      }\n    },\n    submitButton: {\n      color: '#fff',\n      backgroundImage: 'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n      boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\n      marginBottom: 20\n    }\n  }))();\n  return (\n      <StoreConsumer>\n        {context => {\n          return (\n            <Fragment>\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField\n                  select\n                  label=\"Status\"\n                  value={context.filters.get('status')}\n                  onChange={e => context.updateFilters({\n                    ...context.filters.toJS(),\n                    status: e.target.value,\n                    dueDate: null\n                  })}>\n                    <MenuItem value=\"all\">All</MenuItem>\n                    <MenuItem value=\"done\">Done</MenuItem>\n                    <MenuItem value=\"pending\">Pending</MenuItem>\n                </TextField>\n                <TextField\n                  select\n                  label=\"Category\"\n                  value={context.filters.get('category')}\n                  onChange={e => context.updateFilters({...context.filters.toJS(), dueDate: null, category: e.target.value})}>\n                    <MenuItem value=\"all\">All</MenuItem>\n                    {context.categories.map(item => (\n                      <MenuItem value={item.get('id')} key={item.get('id')}>{item.get('name')}</MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                  value={context.filters.get('query')}\n                  label=\"Title or Description\"\n                  onChange={e => context.updateFilters({...context.filters.toJS(), dueDate: null, query: e.target.value})} />\n              </form>\n              <Button className={classes.submitButton} onClick={() => {\n                context.updateFilters({query: '', status: 'pending', category: 'all', dueDate: new Date()});\n              }}>Show Overdue Tasks</Button>\n            </Fragment>\n          );\n        }}\n      </StoreConsumer>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  ButtonGroup,\n  Button\n} from '@material-ui/core';\nimport CategoryForm from './categoryForm';\nimport Tasks from './tasks';\nimport './App.css';\nimport TaskForm from \"./taskForm\";\nimport { StoreConsumer } from \"./store\";\n\nfunction App() {\n  const [categoriesVisible, setCategoriesVisible] = useState(false);\n  const [newTaskVisible, setNewTaskVisible] = useState(false);\n  return (\n    <StoreConsumer>\n      {context => (\n        <div className=\"App\">\n          <ButtonGroup color=\"primary\">\n            <Button onClick={() => setCategoriesVisible(true)}>New Category</Button>\n            <Button onClick={() => setNewTaskVisible(true)}>New Task</Button>\n          </ButtonGroup>\n          <Dialog fullWidth={true} open={categoriesVisible} onClose={() => setCategoriesVisible(false)}>\n            <DialogTitle>New Category</DialogTitle>\n            <DialogContent>\n              <CategoryForm onFormSubmit={({name, color}) => {\n                context.addCategory({name, color});\n                setCategoriesVisible(false);\n              }}/>\n            </DialogContent>\n          </Dialog>\n          <Dialog fullWidth={true} open={newTaskVisible} onClose={() => setNewTaskVisible(false)}>\n            <DialogTitle>New Task</DialogTitle>\n            <DialogContent>\n              <TaskForm categories={context.categories} onFormSubmit={(formData) => {\n                context.addTask(formData);\n                setNewTaskVisible(false);\n              }} />\n            </DialogContent>\n          </Dialog>\n          <Tasks />\n        </div>\n      )}\n    </StoreConsumer>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider } from \"./store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}